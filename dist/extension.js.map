{"version":3,"file":"extension.js","mappings":";;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iBAAiB,SAAS,0BAA0B;AACzH;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iBAAiB,SAAS,0BAA0B;AACzH;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iBAAiB,SAAS,0BAA0B;AACzH;AACA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iBAAiB,SAAS,0BAA0B;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mEAAmE,yBAAyB,SAAS,0CAA0C;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,cAAc,SAAS,oBAAoB;AAC9G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C","sources":[".././src/blackjack.js"],"sourcesContent":["\n// fix CSS\n// add split + double down\n//add pop up to prompt for player name\n// be able to add multiple players: probably would need to create an array of hand objects for this\nclass Card {\n    constructor(suit, rank, imageUrl){\n        this.suit = suit,\n        this.rank = rank,\n        this.imageUrl = imageUrl\n    }\n}\n\nclass Deck {\n    constructor(){\n        this.cards = [],\n        this.createDeck()\n    }\n    createDeck(){\n        const suits = [\"C\", \"D\", \"H\", \"S\"]\n        const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n        for (const suit of suits){\n            for (const rank of ranks){\n                let imageUrl = \"./cards/\" + rank + suit + \".svg\" //path to images\n                let newCard = new Card(suit, rank, imageUrl)\n                this.cards.push(newCard)\n            }\n        }\n    }\n    shuffle(){ //fisher-yates shuffle\n        for (let i = 0; i < this.cards.length; i++){\n            let temp = this.cards[i] //store current value\n            let r = Math.floor(Math.random()*this.cards.length) // random index in cards array\n            this.cards[i] = this.cards[r] // swap current value with random value\n            this.cards[r] = temp // assign stored value at random value\n        }\n    }\n    dealCard(){\n        return this.cards.pop() //returns popped element\n    }\n}\n\nclass hand {\n    constructor(id){\n        this.cards = []\n        this.sum = 0\n        this.playing = false //true if sum <= 21\n        this.cardEl = document.getElementById(id) //message to display cards in html\n        this.blackjack = false //true if hand is blackjack\n        this.aceCount = 0 //number of aces in hand\n    }\n    drawCard(){ //add card to hand (not a hit for player)\n        if (this.playing){\n            let newCard = deck.dealCard()\n            this.cards.push(newCard)\n            if (newCard.rank === 'A')\n                this.aceCount += 1\n            this.sum = this.sumCards()\n            this.cardEl.innerHTML += `<img class=\"card-image\" src=\"${newCard.imageUrl}\" alt=\"${newCard.rank+newCard.suit}\">`\n        }\n    }\n    drawCardOne(){ //add card to hand (not a hit for player)\n        if (this.playing){\n            //let newCard = deck.dealCard()\n            let newCard = new Card('S', 'A', './cards/AS.svg')  // TEST\n            this.cards.push(newCard)\n            if (newCard.rank === 'A')\n                this.aceCount += 1\n            this.sum = this.sumCards()\n            this.cardEl.innerHTML += `<img class=\"card-image\" src=\"${newCard.imageUrl}\" alt=\"${newCard.rank+newCard.suit}\">`\n        }\n    }\n    drawCardTwo(){ //add card to hand (not a hit for player)\n        if (this.playing){\n            //let newCard = deck.dealCard()\n            let newCard = new Card('S', 'K', './cards/KS.svg')  // TEST\n            this.cards.push(newCard)\n            if (newCard.rank === 'A')\n                this.aceCount += 1\n            this.sum = this.sumCards()\n            this.cardEl.innerHTML += `<img class=\"card-image\" src=\"${newCard.imageUrl}\" alt=\"${newCard.rank+newCard.suit}\">`\n        }\n    }\n\n    hit(){ //hit for player hand\n        if (this.playing){\n            // add new card to hand\n            let newCard = deck.dealCard()\n            this.cards.push(newCard)\n            if (newCard.rank === 'A')\n                this.aceCount += 1\n            this.sum = this.sumCards()\n            this.cardEl.innerHTML += `<img class=\"card-image\" src=\"${newCard.imageUrl}\" alt=\"${newCard.rank+newCard.suit}\">`\n            //evaluate hand\n            if (this.sum === 21){\n                endHand()\n            }\n            else if(this.sum > 21){\n                this.playing = false\n                endHand()\n            }\n        }\n    }\n    stay(){ //stay\n        if (this.playing){\n            console.log(playerData.name + \" stays at \" + this.sum)\n            endHand()\n        }\n    }\n    sumCards(){\n        let sum = 0\n        for (let i = 0; i<this.cards.length; i++){\n            if (['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'].includes(this.cards[i].rank))\n                sum += parseInt(this.cards[i].rank)\n            else if (['J', 'Q', 'K'].includes(this.cards[i].rank))\n                sum += 10\n            else //ace\n                sum += 11\n        }\n        if (this.aceCount > 0 && sum > 21){ //subtract for aces\n            let temp = this.aceCount\n            while (sum > 21 && temp > 0){\n                sum -= 10\n                temp -= 1\n            }\n        }\n        return sum\n    }\n    reset(){\n        this.cards = []\n        this.sum = 0\n        this.playing = false\n        this.blackjack = false\n        this.playing = true\n        this.aceCount = 0\n    }\n}\n\nlet playerData = { //player object\n    name: \"Player\",\n    cash: 100, \n    bet: 0\n}\n\nlet playerEl = document.getElementById(\"player-el\") //player name and cash\nplayerEl.textContent = playerData.name + \": $\" + playerData.cash\nlet messageEl = document.getElementById(\"message-el\")\nlet startEl = document.getElementById(\"start-el\")\n//let messageEl = document.querySelector(\"message-el\")\n//querySelector can be used to select classes, id, body or other container, etc. \n\n//create hand for player and dealer\nconst player = new hand(\"player-hand\")\nconst dealer = new hand(\"dealer-hand\")\n\n//create and shuffle deck\nconst deck = new Deck\ndeck.shuffle()\n\nfunction startGame(){\n    startEl.disabled = true\n    //return cards to deck\n    for (const card of player.cards){\n        deck.cards.push(card)\n    }\n    for (const card of dealer.cards){\n        deck.cards.push(card)\n    }\n    //shuffle deck\n    deck.shuffle()\n    //reset html output\n    player.cardEl.textContent = \"Your cards: \"\n    dealer.cardEl.textContent = \"Dealer's cards: \"\n    //reset hands\n    player.reset()\n    dealer.reset()\n    //reset cash if player runs out\n    if (playerData.cash == 0){\n        playerData.cash = 100\n    }\n    playerEl.textContent = playerData.name + \": $\" + playerData.cash\n\n    //confirm bet is within bounds\n    placeBet()\n    if (playerData.bet <= playerData.cash){\n        //deal hands to player and dealer\n        player.drawCard()\n        dealer.drawCard()\n        player.drawCard()\n        dealer.drawCard()\n\n        //hide dealer's second card\n        dealer.cardEl.innerHTML = `Dealer's cards: `;\n        dealer.cardEl.innerHTML += `<img class=\"card-image\" src=\"${dealer.cards[0].imageUrl}\" alt=\"${dealer.cards[0].rank+dealer.cards[0].suit}\">`\n        dealer.cardEl.innerHTML += `<img class=\"card-image\" src=\"./cards/2B.svg\" alt=\"hidden card\">`\n        \n        //render gameplay output\n        let message = \"\"\n        player.sum = player.sumCards()\n        if (player.sum === 21){\n            message = \"Blackjack!\"\n            player.blackjack = true\n            endHand()\n        }\n        else{\n            message = \"Do you want to hit or stay?\"\n        }\n        messageEl.textContent = message\n    }\n    else{\n        messageEl.textContent = \"Please place a valid bet\"\n    }\n}\n\nfunction endHand(){ //end hand and payout bet\n    player.playing = false\n    while(dealer.sum <= 16){\n        dealer.drawCard()\n    }\n    //update html for dealer's hand\n    dealer.cardEl.innerHTML = `Dealer's cards: `\n    for (const card of dealer.cards){\n        dealer.cardEl.innerHTML += `<img class=\"card-image\" src=\"${card.imageUrl}\" alt=\"${card.rank+card.suit}\">`\n    }\n\n    if (player.sum <= 21){\n        if (dealer.sum > 21){\n            messageEl.textContent = \"Dealer busts. You win!\"\n        }\n        else if (player.sum > dealer.sum){\n            messageEl.textContent = \"You win!\"\n        }\n        else if (dealer.sum > player.sum){\n            messageEl.textContent = \"You lose\"\n        }\n        else{\n            messageEl.textContent = \"Draw\"\n        }\n    }\n    else{\n        messageEl.textContent = \"Bust - You lose\"\n    }\n\n    processBet()\n    startEl.disabled = false //allow new hand to begin\n}\n\nfunction placeBet(){\n    let betInput = document.getElementById(\"bet-el\")\n    playerData.bet = betInput.value\n}\n\nfunction processBet(){\n    // let bet = parseFloat(playerData.bet)\n    // let cash = parseFloat(playerData.cash)\n    if ((player.sum > dealer.sum || dealer.sum > 21) && player.sum <= 21){\n        if (player.blackjack){ //payout 2 to 1 for blackjack\n            playerData.cash += 2*parseFloat(playerData.bet)\n            messageEl.textContent += \" Win:\"+ 2*playerData.bet\n        }\n        else{\n            playerData.cash += parseFloat(playerData.bet)\n            messageEl.textContent += \" Win:\"+ playerData.bet\n        }\n    }\n    else if (player.sum === dealer.sum){\n        messageEl.textContent += \". Bet returned\"\n    }\n    else{\n        playerData.cash -= parseFloat(playerData.bet)\n        messageEl.textContent += \" $\" + playerData.bet\n    }\n    playerEl.textContent = playerData.name + \": $\" + playerData.cash\n}"],"names":[],"sourceRoot":""}